# -*- coding: utf-8 -*-
"""meeting_minutes_summarizer.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11YfuqLMBv_MuP9HLvvPWmYuHTOZmHaje

# **Meeting Minutes Summarizer using T5 Model summarization.**

### Upload the Dataset
"""

from google.colab import files
uploaded = files.upload()

"""## Install Required Libraries"""

!pip install transformers sentencepiece

"""# Load the Dataset"""

import pandas as pd

# Load dataset
df = pd.read_csv("meeting_minutes_cleaned.csv")

# Preview data
df.head()

"""# Load Pretrained T5 Model for Summarization"""

from transformers import T5Tokenizer, T5ForConditionalGeneration

# Load the tokenizer and model
tokenizer = T5Tokenizer.from_pretrained("t5-small")
model = T5ForConditionalGeneration.from_pretrained("t5-small")

"""# Define the Summarization Function"""

def generate_summary(text):
    input_text = "summarize: " + text
    input_ids = tokenizer.encode(input_text, return_tensors="pt", max_length=512, truncation=True)
    output = model.generate(input_ids, max_length=100, num_beams=4, early_stopping=True)
    return tokenizer.decode(output[0], skip_special_tokens=True)

"""# Apply Model on Your Dataset"""

# Limit number for speed (you can remove [:10] for full data)
df_sample = df[:10].copy()

# Generate summaries
df_sample["generated_summary"] = df_sample["transcript"].apply(generate_summary)

# Show results
df_sample[["transcript", "summary", "generated_summary"]]

"""# Evaluate Summary Quality Using ROUGE"""

!pip install rouge-score

from rouge_score import rouge_scorer

scorer = rouge_scorer.RougeScorer(['rouge1', 'rougeL'], use_stemmer=True)

def compute_rouge_scores(row):
    scores = scorer.score(row["summary"], row["generated_summary"])
    return pd.Series({
        "rouge1": scores["rouge1"].fmeasure,
        "rougeL": scores["rougeL"].fmeasure
    })

df_scores = df_sample.apply(compute_rouge_scores, axis=1)
df_sample = pd.concat([df_sample, df_scores], axis=1)

df_sample[["summary", "generated_summary", "rouge1", "rougeL"]]

"""## Save Results to CSV"""

df_sample.to_csv("summarized_output.csv", index=False)
files.download("summarized_output.csv")

"""# **Meeting Minutes Summarizer using Pegasus Model summarization.**

# Load Pegasus Tokenizer & Model
"""

from transformers import PegasusTokenizer, PegasusForConditionalGeneration

model_name = "google/pegasus-xsum"

# Load tokenizer and model
tokenizer = PegasusTokenizer.from_pretrained(model_name)
model = PegasusForConditionalGeneration.from_pretrained(model_name)

"""# Define Summarization Function"""

def generate_pegasus_summary(text):
    inputs = tokenizer(text, truncation=True, padding="longest", return_tensors="pt")
    summary_ids = model.generate(inputs["input_ids"], max_length=60, num_beams=5, early_stopping=True)
    return tokenizer.decode(summary_ids[0], skip_special_tokens=True)

"""# Apply Summarization on Dataset"""

# Limit sample for quick testing
df_sample = df[:10].copy()

# Generate summaries
df_sample["generated_summary"] = df_sample["transcript"].apply(generate_pegasus_summary)

# Display results
df_sample[["transcript", "summary", "generated_summary"]]

"""# Evaluate with ROUGE"""

!pip install rouge-score

from rouge_score import rouge_scorer

scorer = rouge_scorer.RougeScorer(['rouge1', 'rougeL'], use_stemmer=True)

def compute_rouge_scores(row):
    scores = scorer.score(row["summary"], row["generated_summary"])
    return pd.Series({
        "rouge1": scores["rouge1"].fmeasure,
        "rougeL": scores["rougeL"].fmeasure
    })

df_scores = df_sample.apply(compute_rouge_scores, axis=1)
df_sample = pd.concat([df_sample, df_scores], axis=1)

df_sample[["summary", "generated_summary", "rouge1", "rougeL"]]

"""# Export Results to CSV"""

df_sample.to_csv("pegasus_summarized_output.csv", index=False)
files.download("pegasus_summarized_output.csv")

"""# **Meeting Minutes Summarizer using BART Model summarization.**

# Install Required Libraries
"""

!pip install transformers

"""## Load the Dataset"""

import pandas as pd

# Load your uploaded dataset
df = pd.read_csv("meeting_minutes_cleaned.csv")
df.head()

"""# Load BART Tokenizer & Model"""

from transformers import BartTokenizer, BartForConditionalGeneration

# Load the tokenizer and model
tokenizer = BartTokenizer.from_pretrained("facebook/bart-large-cnn")
model = BartForConditionalGeneration.from_pretrained("facebook/bart-large-cnn")

"""# Define Summarization Function"""

def generate_bart_summary(text):
    inputs = tokenizer.batch_encode_plus([text], return_tensors="pt", max_length=1024, truncation=True)
    summary_ids = model.generate(inputs['input_ids'], num_beams=4, max_length=100, early_stopping=True)
    return tokenizer.decode(summary_ids[0], skip_special_tokens=True)

"""# Apply to Dataset"""

# Limit to first 10 samples for speed
df_sample = df[:10].copy()

# Generate summaries
df_sample["generated_summary"] = df_sample["transcript"].apply(generate_bart_summary)

# View the result
df_sample[["transcript", "summary", "generated_summary"]]

"""# Evaluate with ROUGE"""

!pip install rouge-score

from rouge_score import rouge_scorer

scorer = rouge_scorer.RougeScorer(['rouge1', 'rougeL'], use_stemmer=True)

def compute_rouge_scores(row):
    scores = scorer.score(row["summary"], row["generated_summary"])
    return pd.Series({
        "rouge1": scores["rouge1"].fmeasure,
        "rougeL": scores["rougeL"].fmeasure
    })

df_scores = df_sample.apply(compute_rouge_scores, axis=1)
df_sample = pd.concat([df_sample, df_scores], axis=1)

df_sample[["summary", "generated_summary", "rouge1", "rougeL"]]

"""# Save Results"""

df_sample.to_csv("bart_summarized_output.csv", index=False)
from google.colab import files
files.download("bart_summarized_output.csv")